import base64
exec(base64.b64decode('#!/usr/bin/env python3
# professional_safe_scanner_v3.py
"""
ProfScan Pro v3
- Adds CVE DB integration (--cve-db) and optional parallel crawling (--parallel)
- Safe-by-default; optional benign probing (--probe) requires explicit permission
Developer: ARYAXZ
Version: 3.0.0
"""
import argparse
import os
import re
import json
import time
import random
import string
import socket
import threading
import difflib
from urllib.parse import urljoin, urlparse, parse_qs
from datetime import datetime
from collections import defaultdict, OrderedDict, deque
from concurrent.futures import ThreadPoolExecutor, as_completed

import requests
from bs4 import BeautifulSoup

# Optional niceties
try:
    import tldextract
except Exception:
    tldextract = None

try:
    from colorama import init as colorama_init, Fore, Style
    colorama_init(autoreset=True)
    COLOR_ENABLED = True
except Exception:
    COLOR_ENABLED = False
    class Fore:
        RED = ""; GREEN=""; YELLOW=""; MAGENTA=""; CYAN=""; BLUE=""; WHITE=""
    class Style:
        BRIGHT = ""; RESET_ALL = ""

# -------------------------
# Metadata & defaults
# -------------------------
TOOL_NAME = "BANDAR BOKEP"
VERSION = "3.0.0"
DEVELOPER = "PENGOCOK HANDAL"
USER_AGENT = f"{TOOL_NAME}/{VERSION} (defensive-only)"
TIMEOUT = 12
POLITE_DELAY = 0.18
MAX_PAGES_DEFAULT = 400
REPORTS_DIR = "reports"
os.makedirs(REPORTS_DIR, exist_ok=True)

COMMON_FILES = [
    ".env", "wp-config.php", "backup.zip", "backup.tar.gz", ".git/HEAD", ".git/config",
    ".svn/entries", "config.php", "readme.html", "README.md", "database.sql"
]

ERROR_SIGNATURES = {
    "mysql": [r"SQL syntax.*MySQL", r"you have an error in your SQL syntax", r"mysql_fetch_array\("],
    "postgres": [r"PG::SyntaxError", r"PostgreSQL.*ERROR", r"org.postgresql"],
    "mssql": [r"Microsoft SQL Server", r"Unclosed quotation mark after the character string"],
    "php": [r"on line \d+ in /", r"Fatal error:.* on line"],
    "java": [r"Exception in thread \"main\"", r"at java\."],
    "python": [r"Traceback \(most recent call last\):", r"File \".*\", line \d+"]
}

HEURISTIC_MAP = {
    "id": ["sql_injection_candidate", "db_lookup"],
    "page": ["lfi_candidate", "include"],
    "file": ["lfi_candidate", "file_include"],
    "path": ["traversal_candidate"],
    "url": ["ssrf_candidate", "open_redirect_candidate"],
    "redirect": ["open_redirect_candidate"],
    "name": ["xss_candidate"],
    "comment": ["xss_stored_candidate"],
    "search": ["xss_or_sqli_candidate"],
    "cmd": ["command_injection_candidate"],
    "exec": ["command_injection_candidate"],
    "token": ["sensitive_token_exposure"]
}

SENSITIVE_PATTERNS = [r"api[_-]?key", r"aws_secret", r"private_key", r"password", r"passwd", r"secret", r"token"]

# -------------------------
# Utilities
# -------------------------
def banner():
    art = r"""
⠠⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠘⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿
⠀⠀⢸⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿
⠀⠀⠀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿
⠀⠀⠀⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿
⠀⠀⠀⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⡿⣏⣿
⠀⠀⠀⢻⣿⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⣀⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣦⣄⣀⠀⠀⠀⣀⣼⣿⣿⣿⣿⣿⣾⡟⠃⠀
⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣝⣛⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣙⣭⣥⣶⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀
⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀
⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢈⢿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣌⢿⣿⣿⣿⣿⣿⣿⣿⡿⢣⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⣿⣦⣽⣛⣻⠿⠿⣟⣛⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣭⣛⣛⣛⣛⣻⣭⣶⣿⣧⠀⠀⠀⠀
⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀
⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡸⣿⡏⢿⣿⣿⣿⡟⣼⣿⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠹⣿⡈⢿⣿⠟⢰⣿⢃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠹⣷⡀⠉⢠⣿⠏⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀
⠀⠀⠀⠀⣿⣿⣿⣿⣯⣍⡛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣷⣶⣿⡟⠀⢿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⢋⣩⣵⣾⣿⣿⣿⡟⠀⠀⠀
⠀⠀⠀⠀⣿⣿⣜⢿⣿⣿⣿⣿⣶⣶⣤⣤⣤⣉⣉⣉⣁⣀⣠⣴⣿⣿⣿⣿⣿⣤⣄⣀⣀⣀⣠⣤⣤⣴⣶⣾⣿⣿⣿⣿⡿⢋⣾⣿⣇⠀⠀⠀
⠀⠀⠀⢰⣿⣿⣿⣷⣮⡝⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⢩⣾⣿⣿⣿⡿⣄⠀⠀
⠀⠀⢰⡏⠘⢿⣿⣿⣿⣇⠀⠀⠀⠀⠉⢭⣭⣽⡟⠛⠛⠛⠋⢁⣿⣿⣿⣿⣷⡈⠉⠉⠉⠉⢭⣭⣭⠵⠀⠀⠀⠀⠀⣼⣿⣿⣿⠟⠀⣽⠀⠀
⠀⠀⠀⢿⣄⠀⠻⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⡿⠃⢀⣾⡟⠀⠀
⠀⠀⠀⠘⣿⣷⣤⣈⠛⠿⣿⣷⣦⣄⡀⠀⠀⠀⠀⠀⣀⣤⣾⡿⢸⣿⣿⣿⡇⢿⣷⣤⣀⡀⠀⠀⠀⢀⣀⣤⣶⣿⡿⠟⣉⣤⣴⣿⡿⠀⠀⠀
⠀⠀⠀⠀⠸⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣾⣿⣿⣿⣷⡈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⡿⠁⠀⠀⠀
⠀⠀⠀⠀⠀⢹⣿⣭⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣷⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣫⣶⣶⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣸⣿⣿⡟⢈⣭⣟⣛⠿⠿⣿⣿⣿⠟⣩⣤⣬⣝⢿⣿⣿⣿⣿⣿⣿⣫⣥⣶⣌⠙⠿⡿⠿⠿⣛⣫⣭⣧⣄⢹⣿⣿⣇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣿⣿⣿⣇⣿⣿⢛⣯⣟⢿⣶⣶⣶⡇⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⢸⣿⣾⣿⢟⣯⣭⣝⢻⣿⣼⣿⣿⡿⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⣿⣿⣿⡿⣵⣿⣿⣿⣷⢹⣿⣿⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸⣿⣿⡏⣾⣿⣿⣿⣧⡹⣿⣿⣿⠇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢿⡿⢋⣾⣿⣿⣿⣿⠟⢈⢿⣿⣿⣷⣤⣉⠙⠿⣿⣿⣿⣿⣿⠿⠛⣉⣤⣾⣿⣿⡿⡁⠙⢿⣿⣿⣿⣿⣌⠻⡿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣨⣶⣿⣿⡿⢟⠋⠀⠀⢸⡎⠻⣿⣿⣿⣿⣿⣶⣮⣭⣿⣯⣵⣶⣿⣿⣿⣿⡿⢟⠱⡇⠀⠀⠈⣙⡻⠿⣿⣿⣦⣄⡀⠀⠀⠀
⠀⠀⠀⠀⠒⠛⠛⠉⣽⣶⣾⣿⣧⠀⠀⠈⠃⣿⣶⣶⢰⣮⡝⣛⣻⢿⣿⣿⢿⣛⡫⣵⣶⢲⣾⣿⠀⠃⠀⠀⣸⣿⣿⣿⣶⠂⠈⠉⠉⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀⠀⢿⡿⠁⠈⠛⠷⠿⠿⠿⠿⠿⠸⠿⠇⠛⠁⠀⢹⣿⠀⠀⠀⠀⠈⣿⣿⣿⢿⠃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⡇⠀⠀⠀⠘⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠀⠀⠀⠀⠀⣾⣿⣿⡿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡇⣠⣶⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡀⠀⠀⢰⣦⠀⠀⢠⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡙⠇⣰⡇⢰⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⣷⢀⣀⡜⢋⣶⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣇⢿⠗⣿⣿⣷⡄⣴⣶⣴⡆⣶⡆⣶⣰⣶⡄⣾⣿⣿⡞⢿⣣⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣷⣧⡻⡿⢟⣣⣛⣣⠻⣃⡻⣣⣛⣣⣛⣡⣛⡻⡿⣱⣷⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣷⣾⣿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⣿⣶⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢿⣿⣿⣭⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣽⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠛⠋⠉⠁⠀⠀⠀⠀⠈⠉⠙⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

"""
    meta = f"{TOOL_NAME}  v{VERSION}  •  Developer: {DEVELOPER}"
    print(Fore.CYAN + art + Style.RESET_ALL if COLOR_ENABLED else art)
    print((Fore.YELLOW + meta + Style.RESET_ALL) if COLOR_ENABLED else meta)
    print()

def now_utc_iso():
    return datetime.utcnow().isoformat() + "Z"

def random_token(prefix="PRB"):
    return f"{prefix}-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def safe_get(url, params=None, method="GET", headers=None):
    headers = headers or {}
    headers.setdefault("User-Agent", USER_AGENT)
    try:
        if method == "HEAD":
            r = requests.head(url, params=params, headers=headers, timeout=TIMEOUT, allow_redirects=True)
        else:
            r = requests.get(url, params=params, headers=headers, timeout=TIMEOUT, allow_redirects=True)
        return r
    except Exception:
        return None

def domain_safe_name(url):
    p = urlparse(url)
    host = p.netloc
    return re.sub(r"[^A-Za-z0-9._-]", "_", host)

def color(text, fore=Fore.WHITE, bright=False):
    if not COLOR_ENABLED:
        return text
    return (Style.BRIGHT if bright else "") + fore + text + Style.RESET_ALL

# -------------------------
# Scoring engine
# -------------------------
def compute_score(evidence):
    score = 0
    score += evidence.get("param_name_heuristic", 0) * 8
    if evidence.get("passive_error"):
        score += 30
    score += min(evidence.get("exposed_file", 0) * 5, 20)
    score += min(evidence.get("reflection_passive", 0) * 7, 28)
    if evidence.get("probe_reflection"):
        score += 25
    if evidence.get("probe_response_change"):
        score += 20
    score += min(evidence.get("cve_matches", 0) * 15, 30)
    if score > 100:
        score = 100
    if score >= 70:
        label = "HIGH"
    elif score >= 35:
        label = "MEDIUM"
    else:
        label = "LOW"
    return score, label

# -------------------------
# Scanner (with parallel crawl)
# -------------------------
class ProfessionalScanner:
    def __init__(self, target, max_pages=MAX_PAGES_DEFAULT, delay=POLITE_DELAY,
                 probe=False, cve_db=None, verbose=False, parallel_workers=0):
        self.target = target.rstrip("/")
        self.base = self._normalize(self.target)
        self.max_pages = max_pages
        self.delay = delay
        self.probe = probe
        self.cve_db = cve_db or {}
        self.verbose = verbose
        self.parallel_workers = parallel_workers if isinstance(parallel_workers, int) and parallel_workers > 0 else 0

        # state
        self.queue = deque([self.target])
        self.visited = set()
        self.pages = {}  # url -> body
        self.headers = {}
        self.params_map = defaultdict(set)
        self.param_examples = defaultdict(set)
        self.forms = []
        self.cms = {}
        self.exposed_files = {}
        self.open_dirs = []
        self.findings = []
        self.sensitive = defaultdict(list)
        self.passive_errors = {}
        self._lock = threading.Lock()
        self.stats = {"fetched": 0, "queued": 1}

    def _normalize(self, url):
        p = urlparse(url)
        scheme = p.scheme or "http"
        host = p.netloc or p.path
        return f"{scheme}://{host}"

    def log(self, *a):
        if self.verbose:
            print("[*]", *a)

    def _fetch_worker(self):
        """Worker used in threaded crawling."""
        while True:
            with self._lock:
                if not self.queue or len(self.visited) >= self.max_pages:
                    return
                url = self.queue.popleft()
            if url in self.visited:
                continue
            self.log("GET", url)
            r = safe_get(url)
            time.sleep(self.delay)
            with self._lock:
                self.visited.add(url)
                self.stats["fetched"] += 1
            if not r:
                continue
            body = r.text or ""
            with self._lock:
                self.pages[url] = body
                self.headers[url] = dict(r.headers)
            self._fingerprint(body, url)
            self._parse_page(body, url)

    def crawl(self):
        """Crawl either single-threaded or with threads depending on parallel_workers."""
        if self.parallel_workers and self.parallel_workers > 1:
            # start threadpool
            workers = min(self.parallel_workers, 30)
            if COLOR_ENABLED:
                print(color(f"[*] Starting parallel crawl with {workers} workers...", Fore.CYAN))
            threads = []
            for _ in range(workers):
                t = threading.Thread(target=self._fetch_worker, daemon=True)
                t.start()
                threads.append(t)
            for t in threads:
                t.join()
        else:
            # single-threaded crawling
            while self.queue and len(self.visited) < self.max_pages:
                with self._lock:
                    url = self.queue.popleft()
                if url in self.visited:
                    continue
                self.log("GET", url)
                r = safe_get(url)
                time.sleep(self.delay)
                with self._lock:
                    self.visited.add(url)
                    self.stats["fetched"] += 1
                if not r:
                    continue
                body = r.text or ""
                with self._lock:
                    self.pages[url] = body
                    self.headers[url] = dict(r.headers)
                self._fingerprint(body, url)
                self._parse_page(body, url)

    def _fingerprint(self, body, url):
        if "wp-content" in body:
            with self._lock:
                self.cms.setdefault("wordpress", []).append(url)
        if "Joomla!" in body or "com_content" in body:
            with self._lock:
                self.cms.setdefault("joomla", []).append(url)
        if "Drupal.settings" in body or "drupal" in body.lower():
            with self._lock:
                self.cms.setdefault("drupal", []).append(url)

    def _parse_page(self, body, url):
        try:
            soup = BeautifulSoup(body, "html.parser")
        except Exception:
            return
        for a in soup.find_all("a", href=True):
            href = a['href'].strip()
            full = urljoin(url, href)
            if urlparse(full).netloc == urlparse(self.base).netloc:
                with self._lock:
                    if full not in self.visited and full not in self.queue and len(self.visited) + len(self.queue) < self.max_pages:
                        if not re.search(r"\.(png|jpg|jpeg|gif|svg|ico|css|woff|woff2|pdf|zip)$", full, re.I):
                            self.queue.append(full)
                            self.stats["queued"] += 1
            q = urlparse(full).query
            if q:
                qs = parse_qs(q)
                for k, v in qs.items():
                    with self._lock:
                        self.params_map[k].add(full)
                        for ex in v:
                            if ex:
                                self.param_examples[k].add(ex)
        for form in soup.find_all("form"):
            fdet = {"action": form.get("action"), "method": (form.get("method") or "GET").upper(), "inputs": []}
            for inp in form.find_all(["input", "textarea", "select"]):
                name = inp.get("name")
                itype = inp.get("type") or inp.name
                if name:
                    fdet["inputs"].append({"name": name, "type": itype})
                    with self._lock:
                        self.params_map[name].add(url)
            with self._lock:
                self.forms.append(fdet)
        text = soup.get_text(" ", strip=True)
        for patt in SENSITIVE_PATTERNS:
            for m in re.finditer(patt, text, re.I):
                snippet = text[max(0, m.start() - 60): m.end() + 60]
                with self._lock:
                    self.sensitive[url].append(snippet)

    def check_common_files(self):
        base = self.base + "/"
        for f in COMMON_FILES:
            url = urljoin(base, f)
            self.log("Checking file", url)
            r = safe_get(url)
            time.sleep(self.delay)
            if r and r.status_code == 200:
                with self._lock:
                    self.exposed_files[url] = {"status": r.status_code, "len": len(r.content)}

    def detect_open_dirs(self):
        candidates = set()
        with self._lock:
            pages_copy = list(self.pages.keys())
        for u in pages_copy:
            p = urlparse(u).path
            if p.endswith("/"):
                candidates.add(urljoin(self.base, p))
            else:
                dirp = "/".join(p.split("/")[:-1]) + "/"
                if dirp and dirp != "/":
                    candidates.add(urljoin(self.base, dirp))
        for c in list(candidates)[:200]:
            self.log("Checking open dir", c)
            r = safe_get(c)
            time.sleep(self.delay)
            if r and r.status_code == 200 and re.search(r"Index of /|Parent Directory", r.text, re.I):
                with self._lock:
                    self.open_dirs.append(c)

    def passive_error_scan(self):
        passive_errors = {}
        with self._lock:
            pages_copy = dict(self.pages)
        for url, body in pages_copy.items():
            for name, patterns in ERROR_SIGNATURES.items():
                for patt in patterns:
                    if re.search(patt, body, re.I):
                        passive_errors.setdefault(url, []).append({"type": name, "pattern": patt})
        with self._lock:
            self.passive_errors = passive_errors
        return passive_errors

    def analyze_params(self):
        self.passive_error_scan()
        findings = []
        with self._lock:
            params_items = list(self.params_map.items())
            exposed_count = len(self.exposed_files)
            cms_keys = list(self.cms.keys())
        for param, urls in params_items:
            evidence = {
                "param": param,
                "seen_in": list(urls)[:12],
                "param_name_heuristic": 0,
                "passive_error": False,
                "exposed_file": exposed_count,
                "reflection_passive": 0,
                "probe_reflection": None,
                "probe_response_change": None,
                "cve_matches": 0,
                "cve_list": [],
                "notes": []
            }
            low = param.lower()
            for frag in HEURISTIC_MAP.keys():
                if frag in low:
                    evidence["param_name_heuristic"] += 1
                    evidence["notes"].append(f"heuristic_match:{frag}")
            examples = list(self.param_examples.get(param, []))[:5]
            with self._lock:
                pages_copy = dict(self.pages)
            for ex in examples:
                if not ex:
                    continue
                ex_esc = re.escape(ex)
                for purl, body in pages_copy.items():
                    if re.search(ex_esc, body, re.IGNORECASE):
                        evidence["reflection_passive"] += 1
                        evidence["notes"].append(f"passive_reflection_example:{ex} on {purl}")
            for purl, errs in self.passive_errors.items():
                if any(purl == u or purl in u for u in urls):
                    evidence["passive_error"] = True
                    evidence["notes"].append(f"error_signature_on:{purl}")
            # CVE matching via cve_db
            if self.cve_db and self.cms:
                for cms_name in cms_keys:
                    if cms_name in self.cve_db:
                        matches = self.cve_db.get(cms_name, [])
                        evidence["cve_matches"] += len(matches)
                        evidence["cve_list"].extend(matches)
                        evidence["notes"].append(f"cve_db_match:{cms_name}")
            findings.append({"param": param, "evidence": evidence})
        with self._lock:
            self.findings = findings
        return findings

    def run_probes(self):
        if not self.probe:
            return
        with self._lock:
            findings_copy = list(self.findings)
        for f in findings_copy:
            param = f["param"]
            seen = f["evidence"]["seen_in"]
            if not seen:
                continue
            sample_url = seen[0]
            parsed = urlparse(sample_url)
            qs = parse_qs(parsed.query)
            probe_token = random_token("PRB")
            qs[param] = [probe_token]
            base = parsed._replace(query="").geturl()
            self.log("Probing", base, "param", param, "token", probe_token)
            r = safe_get(base, params={k: v[0] for k, v in qs.items()})
            time.sleep(self.delay)
            if not r:
                f["evidence"]["probe_reflection"] = False
                f["evidence"]["probe_response_change"] = False
                continue
            if probe_token in (r.text or ""):
                f["evidence"]["probe_reflection"] = True
                f["evidence"]["notes"].append(f"probe_reflected_on:{base}")
            else:
                f["evidence"]["probe_reflection"] = False
            orig_body = None
            with self._lock:
                orig_body = self.pages.get(base, "")
            new_body = r.text or ""
            if orig_body:
                seq = difflib.SequenceMatcher(a=orig_body, b=new_body)
                ratio = seq.quick_ratio()
                if ratio < 0.98:
                    f["evidence"]["probe_response_change"] = True
                    f["evidence"]["notes"].append(f"probe_response_ratio:{ratio:.3f}")
                else:
                    f["evidence"]["probe_response_change"] = False
            else:
                f["evidence"]["probe_response_change"] = None

    def finalize_findings(self):
        finalized = []
        with self._lock:
            findings_copy = list(self.findings)
        for f in findings_copy:
            ev = f["evidence"]
            # include cve_list in evidence if present
            if ev.get("cve_list"):
                ev["notes"].append("cve_matches:" + ",".join(ev.get("cve_list", [])[:5]))
            score, label = compute_score(ev)
            remediation = self.suggest_remediation(ev)
            finalized.append({
                "param": f["param"],
                "seen_in": ev["seen_in"],
                "evidence": ev,
                "score": score,
                "confidence": label,
                "remediation": remediation
            })
        with self._lock:
            self.findings = finalized
        return finalized

    def suggest_remediation(self, ev):
        rem = []
        if ev.get("param_name_heuristic", 0) > 0:
            rem.append("Review how this parameter is used server-side; enforce strict typing & whitelist values.")
        if ev.get("passive_error"):
            rem.append("Disable detailed error messages in production; sanitize error outputs.")
        if ev.get("reflection_passive") or ev.get("probe_reflection"):
            rem.append("Apply proper output encoding and a strict Content-Security-Policy (CSP).")
        if ev.get("probe_response_change"):
            rem.append("Parameter alters rendering — use prepared statements and strict validation.")
        if ev.get("exposed_file", 0) > 0:
            rem.append("Remove or protect backup/config files; disable directory listing; tighten file perms.")
        if ev.get("cve_list"):
            rem.append("Patch affected CMS/plugins per CVE advisories listed.")
        if not rem:
            rem.append("General hardening: input validation, least privilege, WAF, rate-limiting and monitoring.")
        return rem

    def enumerate_subdomains(self, wordlist=None, workers=10):
        host = urlparse(self.base).netloc
        if ":" in host:
            host = host.split(":")[0]
        words = wordlist or ["www", "dev", "test", "staging", "beta", "admin", "api", "m", "mail", "portal"]
        results = {}
        def resolve(name):
            try:
                ip = socket.gethostbyname(name)
                return name, ip
            except Exception:
                return name, None
        with ThreadPoolExecutor(max_workers=workers) as ex:
            futures = {ex.submit(resolve, f"{w}.{host}"): w for w in words}
            for fut in as_completed(futures):
                name, ip = fut.result()
                if ip:
                    results[name] = ip
        return results

    def export_report(self):
        domain = domain_safe_name(self.base)
        ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        json_path = os.path.join(REPORTS_DIR, f"{domain}_{ts}.json")
        html_path = os.path.join(REPORTS_DIR, f"{domain}_{ts}.html")
        report = OrderedDict()
        report["tool"] = TOOL_NAME
        report["version"] = VERSION
        report["developer"] = DEVELOPER
        report["target"] = self.target
        report["scanned_at"] = now_utc_iso()
        with self._lock:
            report["summary"] = {
                "pages_crawled": len(self.pages),
                "unique_params": len(self.params_map),
                "forms": len(self.forms),
                "cms_detected": self.cms,
                "exposed_files": list(self.exposed_files.keys()),
                "open_dirs": self.open_dirs
            }
            report["findings"] = self.findings
            report["sensitive_samples"] = {k: v[:3] for k, v in self.sensitive.items()}
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        html = self._render_html(report)
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html)
        return json_path, html_path

    def _render_html(self, report):
        css = """
        body{font-family:Inter,Segoe UI,Arial,Helvetica,sans-serif;margin:18px;color:#222}
        header{display:flex;align-items:center;gap:20px}
        h1{margin:0}
        .meta{color:#666;font-size:0.95rem}
        table{border-collapse:collapse;width:100%;margin-top:10px}
        th,td{border:1px solid #e6e6e6;padding:8px;text-align:left}
        th{background:#f7f7f7}
        .tag-high{background:#ffdddd;color:#b30000;padding:3px 6px;border-radius:4px}
        .tag-med{background:#fff0cc;color:#b36b00;padding:3px 6px;border-radius:4px}
        .tag-low{background:#eef7dd;color:#2f7a00;padding:3px 6px;border-radius:4px}
        .section{margin-top:18px}
        pre{background:#f5f5f5;padding:10px;border-radius:6px;overflow:auto}
        """
        parts = []
        parts.append("<!doctype html><html><head><meta charset='utf-8'><title>ProfScan Report</title>")
        parts.append(f"<style>{css}</style></head><body>")
        parts.append("<header>")
        parts.append(f"<div><h1>ProfScan Pro Report</h1><div class='meta'>Tool: {TOOL_NAME} | Version: {VERSION} | Developer: {DEVELOPER}</div></div>")
        parts.append("</header>")
        parts.append(f"<div class='section'><strong>Target:</strong> {report['target']}<br><strong>Scanned at (UTC):</strong> {report['scanned_at']}</div>")
        parts.append("<div class='section'><h2>Summary</h2><ul>")
        for k, v in report["summary"].items():
            parts.append(f"<li><strong>{k}:</strong> {v}</li>")
        parts.append("</ul></div>")
        parts.append("<div class='section'><h2>Findings</h2>")
        parts.append("<table><thead><tr><th>#</th><th>Parameter</th><th>Evidence (notes)</th><th>Score</th><th>Confidence</th><th>Remediation</th></tr></thead><tbody>")
        for i, f in enumerate(report["findings"], start=1):
            notes = "<br>".join(f["evidence"].get("notes", [])[:12])
            conf = f["confidence"]
            tag = ""
            if conf == "HIGH":
                tag = "<span class='tag-high'>HIGH</span>"
            elif conf == "MEDIUM":
                tag = "<span class='tag-med'>MEDIUM</span>"
            else:
                tag = "<span class='tag-low'>LOW</span>"
            remediation_html = "<ul>"
            for r in f["remediation"][:6]:
                remediation_html += f"<li>{r}</li>"
            remediation_html += "</ul>"
            parts.append(f"<tr><td>{i}</td><td>{f['param']}</td><td>{notes}</td><td>{f['score']}</td><td>{tag}</td><td>{remediation_html}</td></tr>")
        parts.append("</tbody></table></div>")
        parts.append("<div class='section'><h2>Exposed Files</h2><pre>{}</pre></div>".format(json.dumps(report["summary"].get("exposed_files", []), indent=2)))
        parts.append("<div class='section'><h2>Open Directories</h2><pre>{}</pre></div>".format(json.dumps(report.get("open_dirs", []), indent=2)))
        parts.append("<div class='section'><h2>Sensitive Samples (sample)</h2><pre>{}</pre></div>".format(json.dumps(report.get("sensitive_samples", {}), indent=2)))
        parts.append("</body></html>")
        return "\n".join(parts)

# -------------------------
# CLI
# -------------------------
def load_cve_db(path):
    try:
        with open(path, "r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception:
        return {}

def main():
    banner()
    parser = argparse.ArgumentParser(description=f"{TOOL_NAME} - ProfScan Pro (v{VERSION})")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g. https://example.com)")
    parser.add_argument("--max-pages", type=int, default=MAX_PAGES_DEFAULT, help="Max pages to crawl")
    parser.add_argument("--delay", type=float, default=POLITE_DELAY, help="Delay between requests (seconds)")
    parser.add_argument("--probe", action="store_true", help="Enable benign probing (MUST have permission)")
    parser.add_argument("--cve-db", help="Optional local CVE mapping JSON file")
    parser.add_argument("--parallel", type=int, default=0, help="Enable parallel crawling with N workers (optional)")
    parser.add_argument("--subdomains", action="store_true", help="Run small subdomain enumeration")
    parser.add_argument("--threads", type=int, default=10, help="Threads for subdomain checks")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
    args = parser.parse_args()

    if args.probe:
        print(color("=== PROBE MODE ENABLED ===", Fore.YELLOW, True))
        print("Only enable --probe if you have explicit written permission to test the target.\n")

    cve_db = load_cve_db(args.cve_db) if args.cve_db else {}
    s = ProfessionalScanner(
        target=args.url,
        max_pages=args.max_pages,
        delay=args.delay,
        probe=args.probe,
        cve_db=cve_db,
        verbose=args.verbose,
        parallel_workers=args.parallel
    )

    start = time.time()
    if s.parallel_workers:
        print(color(f"[*] Starting parallel crawl with {s.parallel_workers} workers...", Fore.CYAN))
    else:
        print(color("[*] Starting passive crawl (single-thread)...", Fore.CYAN))
    s.crawl()
    elapsed = time.time() - start
    print(color(f"[*] Crawling completed: pages fetched={len(s.pages)} in {elapsed:.1f}s", Fore.GREEN))

    print(color("[*] Running passive checks (common files, open dirs, error scan)...", Fore.CYAN))
    s.check_common_files()
    s.detect_open_dirs()
    s.passive_error_scan()

    print(color("[*] Collecting and analyzing parameters...", Fore.CYAN))
    s.analyze_params()

    if args.subdomains:
        print(color("[*] Enumerating common subdomains (DNS)...", Fore.CYAN))
        subdomains = s.enumerate_subdomains(workers=args.threads)
        if subdomains:
            print(color(f"[!] Subdomains discovered: {len(subdomains)}", Fore.YELLOW))
            for sd, ip in subdomains.items():
                print(f"  - {sd} -> {ip}")

    if args.probe:
        print(color("[*] Running benign probes (reflection & diff checks)...", Fore.CYAN))
        s.run_probes()

    s.finalize_findings()

    counts = {"HIGH": 0, "MEDIUM": 0, "LOW": 0}
    for fnd in s.findings:
        counts[fnd["confidence"]] = counts.get(fnd["confidence"], 0) + 1

    print("\n" + "=" * 60)
    print(color("Scan Summary", Fore.BLUE, True))
    print(f"Target           : {args.url}")
    print(f"Pages crawled    : {len(s.pages)}")
    print(f"Parameters found : {len(s.params_map)}")
    print(f"Findings         : HIGH={counts['HIGH']} MEDIUM={counts['MEDIUM']} LOW={counts['LOW']}")
    print("=" * 60)

    for fnd in s.findings:
        tag = f"[{fnd['confidence']}]"
        if fnd["confidence"] == "HIGH":
            print(color(tag, Fore.RED, True), color(fnd["param"], Fore.YELLOW), f"score={fnd['score']}")
        elif fnd["confidence"] == "MEDIUM":
            print(color(tag, Fore.MAGENTA), color(fnd["param"], Fore.WHITE))
        else:
            print(color(tag, Fore.CYAN), color(fnd["param"], Fore.WHITE))

    jsonp, htmlp = s.export_report()
    print("\n" + color("[*] Reports generated:", Fore.GREEN))
    print(" -", jsonp)
    print(" -", htmlp)
    print(color("\nDone. Review the HTML report for details and remediation advice.", Fore.GREEN))

if __name__ == "__main__":
    main()
'))